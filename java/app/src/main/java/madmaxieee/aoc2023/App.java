/*
 * This source file was generated by the Gradle 'init' task
 */
package madmaxieee.aoc2023;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;

public class App {
    public static void main(String[] args) {
        final Options options = new Options();
        options.addOption(Option.builder("d").longOpt("day").required().hasArg().type(String.class)
                .desc("Day of the Advent of Code").build());
        options.addOption(Option.builder("t").longOpt("test").hasArg(false).build());
        options.addOption(Option.builder("p").longOpt("part").hasArg().type(String.class).build());

        CommandLineParser parser = new DefaultParser();

        CommandLine cmd;
        try {
            cmd = parser.parse(options, args);
        } catch (ParseException e) {
            e.printStackTrace();
            return;
        }

        int day;
        try {
            day = Integer.parseInt(cmd.getOptionValue("day"));
        } catch (Exception e) {
            System.out.println("Day must be an integer, got: " + cmd.getOptionValue("day"));
            return;
        }

        int part;
        try {
            part = Integer.parseInt(cmd.getOptionValue("part"));
        } catch (Exception e) {
            System.out.println("Part must be an integer, got: " + cmd.getOptionValue("part"));
            return;
        }

        boolean test = cmd.hasOption("test");

        if (day < 1 || day > 25) {
            System.out.println("Day must be between 1 and 25, got: " + day);
            return;
        }

        if (part != 1 && part != 2) {
            System.out.println("Part must be 1 or 2, got: " + part);
            return;
        }

        String input = readInput(day, test);
        String result = solve(day, part, input);
        System.out.println(result);
    }

    private static String readInput(int day, boolean test) {
        String filename = test ? String.format("../inputs/day-%02d-test.txt", day)
                : String.format("../inputs/day-%02d.txt", day);
        try {
            return Files.readString(Paths.get(filename));
        } catch (IOException e) {
            System.out.println("Error reading input file: " + e.getMessage());
            return "";
        }
    }

    private static String solve(int day_num, int part, String input) {
        Solution day = switch (day_num) {
            case 1 -> new Day1();
            default -> throw new UnsupportedOperationException("Unimplemented day: " + day_num);
        };

        return switch (part) {
            case 1 -> day.solvePart1(input);
            case 2 -> day.solvePart2(input);
            default -> throw new UnsupportedOperationException("Unimplemented part: " + part);
        };
    }
}
